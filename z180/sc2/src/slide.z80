INCLUDE "tms.inc"
INCLUDE "tms_constants.inc"
INCLUDE "nouveau.inc"
INCLUDE "macros.inc"

; useful macros
MACRO print addr
        ld      c,C_WRITESTR
        ld      de,addr
        call    BDOS
ENDM

MACRO newline
        ld      c,C_WRITESTR
        ld      de,eol
        call    BDOS
ENDM


BDOS:           equ 5           ; bdos entry point

C_WRITESTR:     equ 9           ; C=9, DE=address of $ terminated string
F_OPEN:         equ 15          ; C=0xF, DE=FCB Address, Errors returned in BA, HL
F_CLOSE:        equ 16          ; C=0x10, DE=FCB Address, Errors in BA, HL
F_SFIRST:       equ 17          ; C=0x11, DE=FCB containing search pattern, ERRORS in BA, HL
F_SNEXT:        equ 18          ; C=0x12
F_READ:         equ 20          ; C=0x14, DE=FCB Address, Errros in BA, HL
F_DMAOFF:       equ 26          ; C=0x1A, DE=Address

FCB:            equ 0x5C        ; Default FCB
DEF_BUF:        equ 0x80        ; Default sector buffer (0x80 bytes long)

BUFFER:         equ 0x1000      ; Image data here.
LISTBUF:        equ 0x5000      ; list of files here.

; BEGIN
        org     0x100
        ld      sp,stack
main:
        ; first make sure that we hit a vblank interrupt.  Useful to make sure the fpga state
        ; is in good condition.  (probably not needed but here for good measure.)
        vb_loop:
        in      a,(io_tmslatch)
        or      0x80
        jr      z,vb_loop

        ; set up vdp memory for G2.       (tms.inc)
        call    tms_init_g2

        ld      c,tms_black             ; (tms_constants.inc)
        call    tms_set_backdrop_color  ; (tms.inc)

        ld      hl,LISTBUF              ; initisalise the pointer into the file list.
        ld      (cur_list_buf_ptr),hl

        call    find_first              ; search for the *.SC2 file.
        call    copy_name_to_list_buf   ; copy the found file to the list.
                                        ; XXX: Add error checking here.

        ; start a loop to find the filenames of the remaining files
        ; this is the main loop of the slideshow and it mainly calls other functions.
loop:
        call    find_next               ; Search for next file
        cp      0xFF                    ; If search returns 0xFF in A then there are no more files.
        jp      z,start_show            ; so start the slide show.
        call    copy_name_to_list_buf   ; else copy the filename to the list.
        cp      0xFF                    ; keep a running total of files.  Max is 256 files.
        jr      nz,loop                 ; because I didn't want to deal with 16bit values.

        ; Start the slide show by reseting the pointer to the list of files and iterating.
start_show:
        ld      hl,LISTBUF              ; Set the pointer to the start of the list.
        ld      (cur_list_buf_ptr),hl
show_loop:                              ; loop
        call    open                    ; call open file
        call    read_file               ; call read file
        call    close                   ; call close file
        call    vdp_write               ; copy data from the image buffer to the VDP
        dec8    file_count              ; decrement the file counter
        or      a                       ; exit when zero.
        jp      z,exit
        call    delay                   ; wait some number of frames 

        ld      hl,(cur_list_buf_ptr)   ; advance the file names list pointer
        ld      bc,12
        add     hl,bc
        ld      (cur_list_buf_ptr),hl
        jp      show_loop               ; loop

        ; Call this function by setting DE to the required DMA address first.
        ; hardly worth having this function at all TBH.
setdma:
        ld      c,F_DMAOFF
        call    BDOS
        ret

        ; The CPM search sequence requires that a search with a given FCB is
        ; performed and then subsequent searches can be made after.
find_first:
        ld      de,DEF_BUF              ; I don't know if the DMA needs to be set if its default.
        call    setdma                  ; setting it here to be explicit.

        call    initfcb                 ; set up the default FCB with the search string

        ld      c,F_SFIRST              ; Call the F_SFIRST BDOS routine
        ld      de,FCB
        call    BDOS

        cp      0xff                    ; if BDOS returns 0xFF in A, then the file was not found.
        jp      nz,find_cont            ; else carry on.
        print   find_err                ; print the error message and bail.
        jp      0

find_next:
        ld      de,DEF_BUF              ; I don't know if this DMA needs to be set if its default.
        call    setdma                  ; setting it here to be explicit.

        ld      c,F_SNEXT               ; BDOS F_SNEXT can only be called after a call to F_SFIRST
        call    BDOS                    ; it does not need a DE argument.

        cp      0xff                    ; If BDOS returns an error, we assume there are no more files.
        jp      nz,find_cont            ; else carry on
        ret                             ; return if no more files.

find_cont:                              ; CARRYING ON
        ld      h,0                     ; The two search routines (F_SFIRST and F_SNEXT) will return a
        ld      l,a                     ; value of 0-3 in A.  Use the value in A to find the directory
        add     hl,hl                   ; entry in the DMA buffer.  It can be found by (DMABUFF + (A * 32))
        add     hl,hl
        add     hl,hl
        add     hl,hl
        add     hl,hl
        ld      bc,DEF_BUF
        add     hl,bc
        ld      (new_fcb_ptr),hl        ; store the start of the directory intery into a poorly named
        ret                             ; pointer.

        ; routine to copy the file name pointed to by `new_fcb_ptr` into the list of filenames
        ; advances the pointer after copying and increments the file counter.
copy_name_to_list_buf:
        ld      hl,(new_fcb_ptr)        ; copy 12 bytes of data from the found directory entry
        ld      de,(cur_list_buf_ptr)
        ld      bc,12
        ldir

        ld      hl,(cur_list_buf_ptr)   ; advance the list pointer by 12 bytes
        ld      bc,12
        add     hl,bc
        ld      (cur_list_buf_ptr),hl
        inc8    file_count              ; increment the file_counter
        ret

        ; routine to print the filename, prep the FCB for open and open.
open:
        ld      hl,(cur_list_buf_ptr)   ; use the list pointer to copy 11 bytes of data (the filename)
        inc     hl                      ; into a buffer for printing.  The buffer is already "$" terminated.
        ld      de,text_buf
        ld      bc,11
        ldir

        ld      de,text_buf             ; Call the BDOS routine for writing a "$" terminated string.
        ld      c,C_WRITESTR
        call    BDOS

        ; prep FCB for open - first copy name from list pointer
        ; fill rest of FCB with zeros
        ld      hl,FCB                  ; First thing we do is write zeros to the FCB.
        ld      b,36
        xor     a
open_l1:
        ld      (hl),a
        inc     hl
        djnz    open_l1

        ; copy filename over            ; then copy the filename into the right place in the FCB
        ld      hl,(cur_list_buf_ptr)
        inc     hl
        ld      de,FCB+1
        ld      bc,11
        ldir
IF 0                                    ; Debugging disabled.  Enable with `IF 1`
        call    debug_fcb
ENDIF
        ld      c,F_OPEN                ; call the BDOS F_OPEN routine to open the file
        ld      de,FCB                  ; described in FCB.
        call    BDOS
        cp      0xFF                    ; If bdos returns 0xFF in A then we have an error.
        jr      z,open_is_err
        ret                             ; else return
open_is_err:
        print   open_err                ; print error message
        jp      exit                    ; bail.

close:
        ld      c,F_CLOSE               ; BDOS close routine.
        ld      de,(cur_list_buf_ptr)
        call    BDOS
        ret

initfcb:                                ; sets up the FCB for F_SFIRST. (Find first)
        xor     a                       ; fill the whole FCB out with zeros first.
        ; drive
        ld      hl,FCB
        ld      b,36
initfcb_l1:
        ld      (hl),a
        inc     hl
        djnz    initfcb_l1

        ld      hl,search               ; copy the search string ????????SC2 into the FCB
        ld      de,FCB+1
        ld      bc,11
        ldir

        ret

read_file:
        ld      de,BUFFER               ; start of image buffer
read_file_lp:
        push    de                      ; save image buffer pointer
        ld      c,F_DMAOFF              ; set dma to image buffer, pointer is in DE
        call    BDOS

        ld      de,FCB                  ; read the next record from the file
        ld      c,F_READ
        call    BDOS

        pop     de                      ; restore image buffer pointer

        or      a                       ; check for error, assume EOF
        jr      nz,eofile

        ld      hl,0x80                 ; add 128 to the image buffer pointer
        add     hl,de
        ex      de,hl
        jr      read_file_lp

eofile:
        ret                             ; not have stuff on the stack that should not be there.

vdp_write:                              ; routine to write the data from disk over to the VDP memory.
        ld      de,0                    ; start at VDP addrss 0
        ld      hl,BUFFER + 7           ; copy data from the image buffer + 7 bytes
        ld      bc,0x3800               ; copy all 0x3800 bytes of data.

        in      a,(io_tmslatch)         ; read the status register to reset the reg fsm
        call    tms_set_write_address   ; set the write address to DE (tms.inc)

        ld      d,b                     ; Copy BC into DE
        ld      e,c
        ld      c,io_tmsdata            ; Set the output port (prepping for OTIR)

        ld      a,d                     ; check if D is zero.  if so copy the last page.
        or      a
        jr      z,wr_resid
        ld      b,0                     ; OTIR copy the data at HL to IO port at C, decrement B, repeat until B = 0
                                        ; When B starts at 0, then it goes 256 times.
wr_256:
        otir                            ; Keep going, decrement D each time until D = 0
        dec     d
        jr      nz,wr_256
wr_resid:                               ; last page of data.
        ld      a,e                     ; check if there is any more data to copy?
        or      a
        jr      nz,wr_resid_cont        ; if so then carry on.
        ret                             ; otherwise done.
wr_resid_cont:
        ld      b,e                     ; copy E into b ( we need to copy this many more bytes)
        otir                            ; HL has been properly incremented with each round of OTIRs.
        ret                             ; when done, return

        ; Simple delay routine using the TMS interrupt signal for timing.
delay:
        call    get_char                ; check if a character is waiting in the ASCI buffer.
        cp      0x1b                    ; was it ESCAPE?
        jp      z,exit                  ; if yes, then bail.
        ld      b,180                   ; wait for 180 TMS Vertical frames before continuing
        call    tms_delay               ; (tms.inc)
        ret

exit:
        jp      0                       ; cold start

IF 0                                    ; debugging disabled, enable with IF 1

debug_fcb:
        ld      hl,FCB                  ; prints all 36 bytes of the FCB in HEX.
        ld      b,36
debug_fcb_lp:
        ld      a,(hl)
        push    bc
        push    hl
        call    hexdump_a
        pop     hl
        pop     bc
        inc     hl
        djnz    debug_fcb_lp
        newline
        ret

hexdump_a:
        push    af
        srl     a
        srl     a
        srl     a
        srl     a
        call    hexdump_nib
        pop     af
        push    af
        and     0x0f
        call    hexdump_nib
        ld      a,':'
        call    puts
        pop     af
        ret

hexdump_nib:
        add     '0'
        cp      '9'+1
        jp      m,hexdump_num
        add     'A'-'9'-1
hexdump_num:
        jp      puts
ENDIF

;==============================================================================
;       VARIABLES
;==============================================================================
search:         db "????????SC2"                ; CPM search string.  ? are wild.
open_err:       db "OPEN FILE ERROR",10,13,"$"  ; Strings.
find_err:       db "FIND FILE ERROR",10,13,"$"
new_fcb_ptr:    dw 0                            ; pointer used in generating list
cur_list_buf_ptr: dw 0                          ; list iterration pointer
file_count:     db 0                            ; file counter
text_buf:       ds 11,0                         ; text buffer for printing filenames
eol:            db 10,13,"$"                    ; ends with new line and "$" termination.

;==============================================================================
;       STACK
;==============================================================================
        ds      1024
stack:  equ     $
